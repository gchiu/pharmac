# GitHub Workflow, Yaml file
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Build New PDFs

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially
# or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    env:
      AWS_S3_BUCKET_NAME: 8th-dev

    # Steps represent a sequence of tasks that are executed as part of the job
    steps:

 #====# CHECKOUT STEPS #=====================================================#

    # Checks-out repository under $GITHUB_WORKSPACE, so your job can access it

    - uses: actions/checkout@v3

 #====# INSTALL PACKAGES #===================================================#

    - name: Update APT  # without this mirrors can fail
      run: sudo apt update

    - name: Install Poppler Utilities
      run: sudo apt install poppler-utils

    - name: Install Ghostscript
      run: sudo apt install ghostscript

    - name: Install Rename
      run: sudo apt install rename

 #====# INSTALL REN-C INTERPRETER #==========================================#

    # Use the debug build ("checked") interpreter so that this script is more
    # useful for feedback to the Ren-C project.

    - name: Download and Cache the Interpreter
      uses: metaeducation/ren-c-action@release
      with:
        checked: true

 #====# DOWNLOAD AND COMPRESS IMAGES #=======================================#

    - name: Grab the pdfs
      run: |
        cd scripts
        r3 grab-pdfs.reb
        cd ..

    - name: List outputs (with sizes) From Build Products
      run: ls -alF scripts

    - name: Compress Images (not used by artifact, but used to upload to S3)
      run: |
        mkdir images
        mv scripts/*.pdf images/
        mv scripts/*.eps images/
        mv scripts/*.png images/
        zip -r pdfs images/

    - name: List Final Contents of Images Directory
      run: ls images/

#====# MAKE IMAGES AVAILABLE AS BUILD ARTIFACT #==============================#

    # GitHub Actions offers temporary storage which is intended to let you pass
    # artifacts of builds between jobs.  It can also be used for looking at
    # results in the build log after the jobs have ended.
    #
    # This is a temporary storage so it's not where you want to keep things
    # long term.
    #
    # https://github.com/actions/upload-artifact
    #
    # A long-term complaint about Github's artifact uploading is that it can't
    # upload a single file without zipping it--so a .zip will be zipped again.
    #
    # https://github.com/actions/upload-artifact/issues/14#issuecomment-662803487
    #
    # So we make an artifact out of the whole images directory itself.
    #
    - name: Upload Files to Temporary Artifact Storage on GitHub Actions
      uses: actions/upload-artifact@v3
      with:
        name: pdfs  # will be compressed into a .zip as pdfs.zip
        path: images/

#====# UPLOAD IMAGES TO S3 #==================================================#

    # This action configures the AWS keys stored in GitHub's "Secrets" for
    # the repository so that `aws s3` allows us to do uploads, without needing
    # to publish any passwords publicly:
    #
    # https://github.com/aws-actions/configure-aws-credentials
    #
    # !!! Note: the bucket name being written to is `8th-dev`, under the
    # directory `images`
    #
    - name: Configure AWS Credentials
      if: github.ref == 'refs/heads/master'  # see notes on DEPLOY STEPS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.EIGHTH_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.EIGHTH_AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Deploy Images
      if: github.ref == 'refs/heads/master'  # see notes on DEPLOY STEPS
      run: |
        mime_type="application/zip"

        local=pdfs.zip
        remote=s3://${AWS_S3_BUCKET_NAME}/images/pdfs.zip
        aws s3 cp $local $remote --content-type $mime_type
